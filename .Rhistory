qplot(x,y)
# Add line
qplot(x, y, geom=c("histogram"))
# Add line
qplot(x, y, geom=c("point", "line"))
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data = mtcars, geom = c("point", "line"))
# Basic plot
qplot(x,y)
# Add line
qplot(x, y, geom=c("point", "line"))
qplot(mpg, wt, data = mtcars, geom = c("line", "line"))
qplot(mpg, wt, data = mtcars, geom = c("point", "line"))
qplot(mpg,wt,data=mtcars)
#qplot(mpg,wt,data=mtcars)
qplot(mpg,wt,data=mtcars,geom=c("histogram"))
#qplot(mpg,wt,data=mtcars)
qplot(aes(mpg,wt,data=mtcars,geom=c("histogram")))
#qplot(mpg,wt,data=mtcars)
qplot(aes(mpg,wt,data=mtcars,geom=c("Bloxplot")))
names(mtcars)
qplot(cyl,mpg,data = mtcars)
qplot(cyl,mpg,data = mtcars,geom = "boxplot")
qplot(cyl,mpg,data = mtcars,geom = "boxplot",shape=factor(cyl))
qplot(cyl,mpg,data = mtcars,geom = "histogram")
qplot(mpg,data = mtcars,geom = "histogram")
qplot(cyl,data = mtcars,geom = "histogram")
#qplot(mpg,wt,data=mtcars)
#qplot(aes(mpg,wt,data=mtcars,geom=c("Bloxplot")))
qplot(mpg, wt, data = mtcars, color = factor(cyl),
geom=c("point", "smooth"))
qplot(mpg,hp, data=mtcars )
str(mtcars)
#qplot(mpg,wt,data=mtcars)
#qplot(aes(mpg,wt,data=mtcars,geom=c("Bloxplot")))
qplot(mpg, wt, data = mtcars, color = factor(hp),
geom=c("point", "smooth"))
qplot(mpg,hp, data=mtcars, color=factor(am))
?wt
qplot(x, y=NULL, data, geom="auto",
str(df$cyl)
qplot(x=mpg,y= wt, data=mtcars)
qplot(mpg, wt, data=mtcars)
#qplot(mpg,wt,data=mtcars)
#qplot(aes(mpg,wt,data=mtcars,geom=c("Bloxplot")))
qplot(mpg, wt, data = mtcars, color = hp,
geom=c("point", "smooth"))
df[,'cyl'] <- as.factor(df[,'cyl'])
qplot(mpg, wt, data = df, colour = cyl)
qplot(mpg, wt, data = df, colour = cyl)
# Add lines
qplot(mpg, wt, data = df, colour = cyl,
geom=c("point", "line"))
# Add lines
qplot(mpg, wt, data = df, colour = red,
geom=c("point", "line"))
# Add lines
qplot(mpg, wt, data = df, colour = am,
geom=c("point", "line"))
# Add lines
qplot(mpg, wt, data = df, colour = factor(am),
geom=c("point", "line"))
qplot(mpg,hp, data=mtcars, color=factor(am))
# Change the size of points according to
# the values of a continuous variable
qplot(mpg, wt, data = mtcars, size = mpg)
# Change the size of points according to
# the values of a continuous variable
qplot(mpg, wt, data = mtcars, size = wt)
# Change the size of points according to
# the values of a continuous variable
qplot(mpg, wt, data = mtcars, size = mpg)
df[,'cyl'] <- as.factor(df[,'cyl'])
qplot(mpg, wt, data = mtcars, label = rownames(mtcars),
geom=c("point", "text"),
hjust=0, vjust=0)
# Change point shapes by groups
qplot(mpg, wt, data = mtcars, shape = factor(cyl))
qplot(mpg, wt, data = df, colour = cyl)
# Change the color by a continuous numeric variable
qplot(mpg, wt, data = mtcars, colour = "red")
data("airquality")
colSums(is.na(airquality))
library(ggplot2)
ggplot()+
gemo_density(aes(x=airquality$Ozone),fill='red')
ggplot()+
gemo_density(aes(x=airquality$Ozone),fill="red")
ggplot()+
gemo_density(aes(x=airquality$Ozone),fill="red")
library(ggplot2)
ggplot()+
gemo_density(aes(x=airquality$Ozone),fill="red")
ggplot()+
geom_density(aes(x=airquality$Ozone),fill="red")
airquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone,na.rm=T)
colSums(airquality)
ggplot()+
geom_density(aes(x=airquality$Ozone),fill="red")
airquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone,na.rm=T)
colSums(airquality)
airquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone,na.rm=T)
colSums(airquality)
ggplot()+
geom_density(aes(x=airquality$Ozone),fill="red")
data("airquality")
data("airquality")
library(ggplot2)
ggplot()+
geom_density(aes(x=airquality$Ozone),fill="red")
airquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone,na.rm=T)
colSums(airquality)
ggplot()+
geom_density(aes(x=airquality$Ozone),fill="red")
airquality$Ozone[is.na(airquality$Ozone)] <- medianlog((airquality$Ozone,na.rm=T))
getwd()
data2 <- read.csv("student.csv")
data2 <- data2[,c(1,4,8,10,11,12,13,17)]
str(data2)
data2$gender <- ifelse(data2$gender=="M",1,2)
data2$StageID <- ifelse(data2$StageID=="HighSchool",1,ifelse(data2$StageID=="lowerlevel",2,3))
data2$Semester <- ifelse(data2$Semester=="F",1,2)
library(caTools)
set.seed(345)
split <- sample(1:nrow(data2),0.75*nrow(data2))
train_input <- data2[split,-8]
test_input <- data2[-split,-8]
train_output <- data2[split,8]
test_output <- data2[-split,8]
train_input <- scale(train_input)
test_input <- scale(test_input)
dim(train_input)
dim(test_input)
dim(train_output)
library(class)
classfier <- knn(train_input,test_input,cl=train_output,k=5)
classfier
gg <- table(classfier,test_output)
gg
acc=function(x)
{
sum(diag(x))/sum(rowSums(x))
}
colnames(data2)
acc(gg)
library(caret)
data2$Class <- factor(data2$Class)
set.seed(123)
head(data2)
str(data2)
d <- sample(1:nrow(data2),0.75*nrow(data2))
train1 <-data2[d,]
test <- data2[-d,]
trcl <- trainControl(method='repeatedcv',number=10,repeats = 3)
#model1 <- train(class~.,data=data2,method='knn',trcontrol=trcl,tunelenght=10,preProcess=c('center','scale'))
model1<-train(Class~.,data=data2,method='knn',trControl=trcl,tuneLength=10,preProcess=c('center','scale'))
model1
pr<-predict(model1,newdata = test)
pr
tab1<-table(pr,test$Class)
tab1
accuracy<-function(x){
sum(diag(x))/sum(rowSums(x))
}
accuracy(tab1)
install.packages("flex")
install.packages("flex dashboard")
install.packages("flexdashboard")
library(flexdashboard)
library(flexdashboard)
data(iris)
data(iris)
data(iris)
data(iris)
### IRIS DATA
valueBox(paste("species"))
View(iris)
View(iris)
View(iris)
colnames(iris)
valueBox(length(iris$Sepal.lenght),icon="fa-user")
library(flexdashboard)
```{r}
library(flexdashboard)
library(ggplot2)
#install.packages("jsonlite")
#install.packages("ggplot2")
#install.packages("pander")
#install.packages("stringr")
#install.packages("cowplot")
library(rmarkdown)
library(rjson)
#install.packages("jsonlite")
#install.packages("ggplot2")
#install.packages("pander")
#install.packages("stringr")
#install.packages("cowplot")
library(rmarkdown)
library(rjson)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(pander)
library(stringr)
library(cowplot)
# reading the data
us_data <- read.csv("USvideos.csv")
gb_data <- read.csv("GBvideos.csv")
ca_data <- read.csv("CAvideos.csv")
de_data <- read.csv("DEvideos.csv")
fr_data <- read.csv("FRvideos.csv")
setwd("F:\\DATA science\\youtube-new")
#install.packages("jsonlite")
#install.packages("ggplot2")
#install.packages("pander")
#install.packages("stringr")
#install.packages("cowplot")
library(rmarkdown)
library(rjson)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(pander)
library(stringr)
library(cowplot)
# reading the data
us_data <- read.csv("USvideos.csv")
gb_data <- read.csv("GBvideos.csv")
ca_data <- read.csv("CAvideos.csv")
de_data <- read.csv("DEvideos.csv")
fr_data <- read.csv("FRvideos.csv")
summary(us_data)
##We see that the category id is character type. Lets convert it to numeric
##type because it will be used a lot for further analysis. We will do it for all
#5 datasets.
us_data <- us_data[!(us_data$video_error_or_removed == "True" || us_data$comments_disabled == TRUE),]
gb_data <- gb_data[!(gb_data$video_error_or_removed == "True" || gb_data$comments_disabled == TRUE),]
ca_data <- ca_data[!(ca_data$video_error_or_removed == "True" || ca_data$comments_disabled == TRUE),]
de_data <- de_data[!(de_data$video_error_or_removed == "True" || de_data$comments_disabled == TRUE),]
fr_data <- fr_data[!(fr_data$video_error_or_removed == "True" || fr_data$comments_disabled == TRUE),]
comments_disabled
#removing the columns which are not useful for the analysises
us_data <- us_data[, !(colnames(us_data) %in% c("thumbnail_link","comments_disabled","ratings_disabled","video_error_or_removed"))]
gb_data <- gb_data[, !(colnames(gb_data) %in% c("thumbnail_link","comments_disabled","ratings_disabled","video_error_or_removed"))]
ca_data <- ca_data[, !(colnames(ca_data) %in% c("thumbnail_link","comments_disabled","ratings_disabled","video_error_or_removed"))]
de_data <- de_data[, !(colnames(de_data) %in% c("thumbnail_link","comments_disabled","ratings_disabled","video_error_or_removed"))]
fr_data <- fr_data[, !(colnames(fr_data) %in% c("thumbnail_link","comments_disabled","ratings_disabled","video_error_or_removed"))]
pairs(us_data[7:10], method = "kendall",panel = panel.smooth, cex = 1.5, pch = 21, bg = "green", main = "Pairs plot for
trending videos in US")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
ca_df <- as.data.frame(sort(table(ca_data$category_title), decreasing = TRUE))
names(ca_df) <- c("category_title","count")
ggplot(ca_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") + labs(title = "Plot of trending video categories in
Canada")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
ggplot(gb_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
View(gb_df)
View(gb_df)
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
ggplot(gb_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") + labs(title = "Plot of trending video categories in GB")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
ggplot(gb_df, aes(x = category_title, y = count)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") + labs(title = "Plot of trending video categories in GB")
View(gb_df)
View(gb_df)
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
#plotting the graph for  us
names(us_df) <- c("category_title","count")
View(us_df)
View(us_df)
ggplot(us_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
#plotting the graph for  us
names(us_df) <- c("category_title","count")
ggplot(us_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
#plotting the graph for  us
names(us_df) <- c("category_title","count")
ggplot(us_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
#plotting the graph for  us
names(us_df) <- c("category_title","count")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
#plotting the graph for  us
names(us_df) <- c("category_title","count")
#plotting the graph for  us
names(us_data) <- c("category_title","count")
ggplot(us_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
#plotting the graph for  us
names(us_data) <- c("category_title","count")
#plotting the graph for  us
names(us_data) <- c("category_title","count")
#plotting the graph for  us
names(us_data) <- c("category_title","count")
ggplot(us_data, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
+ scale_x_discrete(name = "vedios category ") +
scale_y_continuous(name = "Number of videos") +
labs(title = "Plot of trending video categories in US")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
names(us_df) <- c("category_title","count")
ggplot(us_df, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") +
labs(title = "Plot of trending video categories in US")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
names(us_df) <- c("category_title","count")
ggplot(us_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") + labs(title = "Plot of trending video categories in US")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
us_df <- as.data.frame(sort(table(us_data$category_title), decreasing = TRUE))
names(us_df) <- c("category_title","count")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
View(us_df)
View(us_df)
View(gb_df)
View(gb_df)
View(gb_data)
View(gb_data)
View(us_data)
View(us_data)
#renameing the coloumn names
names(US_category) <- c("category_id","category_title")
##From this JSON data, we need to fetch the name of the category corresponding
##to the category id. Since the json data is an object of object array.
##We can directly access data by calling out by index.
#Then we will bind the category id and titles into a data frame.
US_category <-  as.data.frame(cbind(us_cat_json[["items"]][["id"]], us_cat_json[["items"]][["snippet"]][["title"]]))
# now import the json dataset to import and combind it
us_cat_json <- fromJSON("US_category_id.json")
gb_cat_json <- fromJSON("GB_category_id.json")
ca_cat_json <- fromJSON("CA_category_id.json")
de_cat_json <- fromJSON("DE_category_id.json")
fr_cat_json <- fromJSON("FR_category_id.json")
##From this JSON data, we need to fetch the name of the category corresponding
##to the category id. Since the json data is an object of object array.
##We can directly access data by calling out by index.
#Then we will bind the category id and titles into a data frame.
US_category <-  as.data.frame(cbind(us_cat_json[["items"]][["id"]], us_cat_json[["items"]][["snippet"]][["title"]]))
GB_category <-  as.data.frame(cbind(gb_cat_json[["items"]][["id"]], gb_cat_json[["items"]][["snippet"]][["title"]]))
CA_category <-  as.data.frame(cbind(ca_cat_json[["items"]][["id"]], ca_cat_json[["items"]][["snippet"]][["title"]]))
DE_category <-  as.data.frame(cbind(de_cat_json[["items"]][["id"]], de_cat_json[["items"]][["snippet"]][["title"]]))
FR_category <-  as.data.frame(cbind(fr_cat_json[["items"]][["id"]], fr_cat_json[["items"]][["snippet"]][["title"]]))
#renameing the coloumn names
names(US_category) <- c("category_id","category_title")
names(GB_category) <- c("category_id","category_title")
names(CA_category) <- c("category_id","category_title")
names(DE_category) <- c("category_id","category_title")
names(FR_category) <- c("category_id","category_title")
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
View(us_data)
View(us_data)
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by.x = "category_id", all = "TRUE")
View(US_category)
View(US_category)
View(US_category)
# now import the json dataset to import and combind it
us_cat_json <- fromJSON("US_category_id.json")
gb_cat_json <- fromJSON("GB_category_id.json")
ca_cat_json <- fromJSON("CA_category_id.json")
de_cat_json <- fromJSON("DE_category_id.json")
fr_cat_json <- fromJSON("FR_category_id.json")
##From this JSON data, we need to fetch the name of the category corresponding
##to the category id. Since the json data is an object of object array.
##We can directly access data by calling out by index.
#Then we will bind the category id and titles into a data frame.
US_category <-  as.data.frame(cbind(us_cat_json[["items"]][["id"]], us_cat_json[["items"]][["snippet"]][["title"]]))
GB_category <-  as.data.frame(cbind(gb_cat_json[["items"]][["id"]], gb_cat_json[["items"]][["snippet"]][["title"]]))
CA_category <-  as.data.frame(cbind(ca_cat_json[["items"]][["id"]], ca_cat_json[["items"]][["snippet"]][["title"]]))
DE_category <-  as.data.frame(cbind(de_cat_json[["items"]][["id"]], de_cat_json[["items"]][["snippet"]][["title"]]))
FR_category <-  as.data.frame(cbind(fr_cat_json[["items"]][["id"]], fr_cat_json[["items"]][["snippet"]][["title"]]))
#renameing the coloumn names
names(US_category) <- c("category_id","category_title")
names(GB_category) <- c("category_id","category_title")
names(CA_category) <- c("category_id","category_title")
names(DE_category) <- c("category_id","category_title")
names(FR_category) <- c("category_id","category_title")
View(FR_category)
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
View(us_data)
View(us_data)
View(US_category)
View(US_category)
View(US_category)
View(US_category)
View(gb_df)
View(gb_df)
#Now lets merge this category data frame with our original data frame by
#category id for respective country's dataset.
us_data <- merge(x = us_data, y = US_category, by = "category_id", all = "TRUE")
gb_data <- merge(x = gb_data, y = GB_category, by = "category_id", all = "TRUE")
ca_data <- merge(x = ca_data, y = CA_category, by = "category_id", all = "TRUE")
de_data <- merge(x = de_data, y = DE_category, by = "category_id", all = "TRUE")
fr_data <- merge(x = fr_data, y = FR_category, by = "category_id", all = "TRUE")
gb_df <- as.data.frame(sort(table(gb_data$category_title), decreasing = TRUE))
names(gb_df) <- c("category_title","count")
ggplot(gb_df, aes(x = category_title, y = count, fill = factor(category_title))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none")
ca_df <- as.data.frame(sort(table(ca_data$category_title), decreasing = TRUE))
names(ca_df) <- c("category_title","count")
ggplot(ca_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") +
labs(title = "Plot of trending video categories in
Canada")
de_df <- as.data.frame(sort(table(de_data$category_title), decreasing = TRUE))
names(de_df) <- c("category_title","count")
ggplot(de_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") +
scale_y_continuous(name = "Number of videos") + labs(title = "Plot of trending video categories in
Denmark")
fr_df <- as.data.frame(sort(table(fr_data$category_title), decreasing = TRUE))
names(fr_df) <- c("category_title","count")
ggplot(fr_df, aes(x = category_title, y = count, fill = factor(category_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 70,hjust = 1), legend.position = "none") + scale_x_discrete(name = "Video
category ") + scale_y_continuous(name = "Number of videos") +
labs(title = "Plot of trending video categories in
France")
## most treading vedios in us
us_mostTrended <- as.data.frame(sort(table(us_data$video_id),
decreasing = TRUE))[1:10,]
names(us_mostTrended) <- c("video_id", "days")
t <- unique(us_data[,c(2,4)])
us_mostTrended <- merge(us_mostTrended,t, by = "video_id")
colnames(us_mostTrended)[3] <- "video_title"
p <- ggplot(us_mostTrended, aes(x = video_title, y = days, fill = factor(us_mostTrended$video_title))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_blank(), legend.title = element_blank(), legend.text = element_text(size = 7)) +
scale_x_discrete(name = "Video title") + scale_y_continuous(name = "Number of
days") + labs(title = "Most trended videos in US") + geom_text(aes(label =
us_mostTrended$days), vjust = 0)
plot_grid(p, align = "V", rel_widths = c(10))
us_ch_df <- as.data.frame(us_data$channel_title[!duplicated(us_data$title)])
names(us_ch_df) <- c("channel")
names(us_ch_df) <- c("channel", "count")
ggplot(us_ch_df[1:10,], aes(x = channel, y = count, fill = factor(channel))) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45,hjust = 1), legend.position = "none") + scale_x_discrete(name =
"Channel ",label = function(x) str_wrap(x, width = 15)) + scale_y_continuous(name = "Number of videos") +
labs(title = "Plot of top 10 trending channels in US")
gb_ch_df <- as.data.frame(gb_data$channel_title[!duplicated(gb_data$title)])
names(gb_ch_df) <- c("channel")
gb_ch_df <- as.data.frame(sort(table(gb_ch_df$channel), decreasing = TRUE))
names(gb_ch_df) <- c("channel", "count")
ggplot(gb_ch_df[1:10,], aes(x = channel, y = count, fill = factor(channel))) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45,hjust
= 1), legend.position = "none") + scale_x_discrete(name = "Channel ",label =
function(x) str_wrap(x, width = 15)) + scale_y_continuous(name = "Number of
videos") +
labs(title = "Plot of top 10 trending channels in Britain")
# most top 10 vedios in canada
ca_ch_df <- as.data.frame(ca_data$channel_title[!duplicated(ca_data$title)])
names(ca_ch_df) <- c("channel")
ca_ch_df <- as.data.frame(sort(table(ca_ch_df$channel), decreasing = TRUE))
names(ca_ch_df) <- c("channel", "count")
ggplot(ca_ch_df[1:10,], aes(x = channel, y = count, fill = factor(channel))) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45,hjust
= 1), legend.position = "none") + scale_x_discrete(name = "Channel ",label =
function(x) str_wrap(x, width = 15)) + scale_y_continuous(name = "Number of
videos") + labs(title = "Plot of top 10 trending channels in Canada")
de_ch_df <- as.data.frame(de_data$channel_title[!duplicated(de_data$title)])
names(de_ch_df) <- c("channel")
de_ch_df <- as.data.frame(sort(table(de_ch_df$channel), decreasing = TRUE))
names(de_ch_df) <- c("channel", "count")
ggplot(de_ch_df[1:10,], aes(x = channel, y = count, fill = factor(channel))) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45,hjust
= 1), legend.position = "none") + scale_x_discrete(name = "Channel ",label =
function(x) str_wrap(x, width = 15)) + scale_y_continuous(name = "Number of
videos") + labs(title = "Plot of top 10 trending channels in Denmark")
fr_ch_df <- as.data.frame(fr_data$channel_title[!duplicated(fr_data$title)])
names(fr_ch_df) <- c("channel")
fr_ch_df <- as.data.frame(sort(table(fr_ch_df$channel), decreasing = TRUE))
names(fr_ch_df) <- c("channel", "count")
ggplot(fr_ch_df[1:10,], aes(x = channel, y = count, fill = factor(channel))) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45,hjust
= 1), legend.position = "none") + scale_x_discrete(name = "Channel ",label =
function(x) str_wrap(x, width = 15)) + scale_y_continuous(name = "Number of
videos") + labs(title = "Plot of top 10 trending channels in France")
